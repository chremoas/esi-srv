// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: corporation.proto

package chremoas_esi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for CorporationService service

type CorporationService interface {
	GetCorporationById(ctx context.Context, in *GetCorporationByIdRequest, opts ...client.CallOption) (*GetCorporationByIdResponse, error)
}

type corporationService struct {
	c    client.Client
	name string
}

func NewCorporationService(name string, c client.Client) CorporationService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "chremoas.esi"
	}
	return &corporationService{
		c:    c,
		name: name,
	}
}

func (c *corporationService) GetCorporationById(ctx context.Context, in *GetCorporationByIdRequest, opts ...client.CallOption) (*GetCorporationByIdResponse, error) {
	req := c.c.NewRequest(c.name, "CorporationService.GetCorporationById", in)
	out := new(GetCorporationByIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CorporationService service

type CorporationServiceHandler interface {
	GetCorporationById(context.Context, *GetCorporationByIdRequest, *GetCorporationByIdResponse) error
}

func RegisterCorporationServiceHandler(s server.Server, hdlr CorporationServiceHandler, opts ...server.HandlerOption) {
	type corporationService interface {
		GetCorporationById(ctx context.Context, in *GetCorporationByIdRequest, out *GetCorporationByIdResponse) error
	}
	type CorporationService struct {
		corporationService
	}
	h := &corporationServiceHandler{hdlr}
	s.Handle(s.NewHandler(&CorporationService{h}, opts...))
}

type corporationServiceHandler struct {
	CorporationServiceHandler
}

func (h *corporationServiceHandler) GetCorporationById(ctx context.Context, in *GetCorporationByIdRequest, out *GetCorporationByIdResponse) error {
	return h.CorporationServiceHandler.GetCorporationById(ctx, in, out)
}
