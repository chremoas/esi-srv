// Code generated by protoc-gen-go. DO NOT EDIT.
// source: character.proto

package chremoas_esi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CharacterRequest struct {
	EntityId int32 `protobuf:"varint,1,opt,name=EntityId" json:"EntityId,omitempty"`
}

func (m *CharacterRequest) Reset()                    { *m = CharacterRequest{} }
func (m *CharacterRequest) String() string            { return proto.CompactTextString(m) }
func (*CharacterRequest) ProtoMessage()               {}
func (*CharacterRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *CharacterRequest) GetEntityId() int32 {
	if m != nil {
		return m.EntityId
	}
	return 0
}

type CharacterResponse struct {
	Result *Character `protobuf:"bytes,1,opt,name=Result" json:"Result,omitempty"`
}

func (m *CharacterResponse) Reset()                    { *m = CharacterResponse{} }
func (m *CharacterResponse) String() string            { return proto.CompactTextString(m) }
func (*CharacterResponse) ProtoMessage()               {}
func (*CharacterResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *CharacterResponse) GetResult() *Character {
	if m != nil {
		return m.Result
	}
	return nil
}

type Character struct {
	Id             int32   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	Name           string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Description    string  `protobuf:"bytes,3,opt,name=Description" json:"Description,omitempty"`
	CorporationId  int32   `protobuf:"varint,4,opt,name=CorporationId" json:"CorporationId,omitempty"`
	AllianceId     int32   `protobuf:"varint,5,opt,name=AllianceId" json:"AllianceId,omitempty"`
	Birthday       int64   `protobuf:"varint,6,opt,name=Birthday" json:"Birthday,omitempty"`
	Gender         string  `protobuf:"bytes,7,opt,name=Gender" json:"Gender,omitempty"`
	RaceId         int32   `protobuf:"varint,8,opt,name=RaceId" json:"RaceId,omitempty"`
	BloodlineId    int32   `protobuf:"varint,9,opt,name=BloodlineId" json:"BloodlineId,omitempty"`
	AncestryId     int32   `protobuf:"varint,10,opt,name=AncestryId" json:"AncestryId,omitempty"`
	SecurityStatus float32 `protobuf:"fixed32,11,opt,name=SecurityStatus" json:"SecurityStatus,omitempty"`
}

func (m *Character) Reset()                    { *m = Character{} }
func (m *Character) String() string            { return proto.CompactTextString(m) }
func (*Character) ProtoMessage()               {}
func (*Character) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *Character) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Character) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Character) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Character) GetCorporationId() int32 {
	if m != nil {
		return m.CorporationId
	}
	return 0
}

func (m *Character) GetAllianceId() int32 {
	if m != nil {
		return m.AllianceId
	}
	return 0
}

func (m *Character) GetBirthday() int64 {
	if m != nil {
		return m.Birthday
	}
	return 0
}

func (m *Character) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *Character) GetRaceId() int32 {
	if m != nil {
		return m.RaceId
	}
	return 0
}

func (m *Character) GetBloodlineId() int32 {
	if m != nil {
		return m.BloodlineId
	}
	return 0
}

func (m *Character) GetAncestryId() int32 {
	if m != nil {
		return m.AncestryId
	}
	return 0
}

func (m *Character) GetSecurityStatus() float32 {
	if m != nil {
		return m.SecurityStatus
	}
	return 0
}

func init() {
	proto.RegisterType((*CharacterRequest)(nil), "chremoas.esi.CharacterRequest")
	proto.RegisterType((*CharacterResponse)(nil), "chremoas.esi.CharacterResponse")
	proto.RegisterType((*Character)(nil), "chremoas.esi.Character")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for CharacterQuery service

type CharacterQueryClient interface {
	GetCharacter(ctx context.Context, in *CharacterRequest, opts ...client.CallOption) (*CharacterResponse, error)
}

type characterQueryClient struct {
	c           client.Client
	serviceName string
}

func NewCharacterQueryClient(serviceName string, c client.Client) CharacterQueryClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "chremoas.esi"
	}
	return &characterQueryClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *characterQueryClient) GetCharacter(ctx context.Context, in *CharacterRequest, opts ...client.CallOption) (*CharacterResponse, error) {
	req := c.c.NewRequest(c.serviceName, "CharacterQuery.GetCharacter", in)
	out := new(CharacterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CharacterQuery service

type CharacterQueryHandler interface {
	GetCharacter(context.Context, *CharacterRequest, *CharacterResponse) error
}

func RegisterCharacterQueryHandler(s server.Server, hdlr CharacterQueryHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&CharacterQuery{hdlr}, opts...))
}

type CharacterQuery struct {
	CharacterQueryHandler
}

func (h *CharacterQuery) GetCharacter(ctx context.Context, in *CharacterRequest, out *CharacterResponse) error {
	return h.CharacterQueryHandler.GetCharacter(ctx, in, out)
}

func init() { proto.RegisterFile("character.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xc1, 0x6e, 0xe2, 0x30,
	0x10, 0x86, 0x37, 0x01, 0xb2, 0x30, 0xb0, 0xec, 0xae, 0x0f, 0xad, 0xc5, 0x81, 0x46, 0x51, 0x55,
	0xe5, 0x94, 0x4a, 0xf4, 0x09, 0x0a, 0x54, 0x28, 0x97, 0x4a, 0x84, 0x27, 0x70, 0x9d, 0x91, 0xb0,
	0x14, 0xec, 0xd4, 0x76, 0x0e, 0x79, 0xc8, 0xbe, 0x53, 0x15, 0x93, 0x86, 0xb4, 0x12, 0xb7, 0xfc,
	0xdf, 0xff, 0x67, 0x66, 0x32, 0x13, 0xf8, 0xcb, 0x8f, 0x4c, 0x33, 0x6e, 0x51, 0x27, 0xa5, 0x56,
	0x56, 0x91, 0x19, 0x3f, 0x6a, 0x3c, 0x29, 0x66, 0x12, 0x34, 0x22, 0x4a, 0xe0, 0xdf, 0xe6, 0x2b,
	0x90, 0xe1, 0x7b, 0x85, 0xc6, 0x92, 0x05, 0x8c, 0x5f, 0xa4, 0x15, 0xb6, 0x4e, 0x73, 0xea, 0x85,
	0x5e, 0x3c, 0xca, 0x3a, 0x1d, 0x6d, 0xe1, 0x7f, 0x2f, 0x6f, 0x4a, 0x25, 0x0d, 0x92, 0x47, 0x08,
	0x32, 0x34, 0x55, 0x61, 0x5d, 0x7c, 0xba, 0xba, 0x4d, 0xfa, 0x3d, 0x92, 0xcb, 0x0b, 0x6d, 0x2c,
	0xfa, 0xf0, 0x61, 0xd2, 0x51, 0x32, 0x07, 0xbf, 0xeb, 0xe4, 0xa7, 0x39, 0x21, 0x30, 0x7c, 0x65,
	0x27, 0xa4, 0x7e, 0xe8, 0xc5, 0x93, 0xcc, 0x3d, 0x93, 0x10, 0xa6, 0x5b, 0x34, 0x5c, 0x8b, 0xd2,
	0x0a, 0x25, 0xe9, 0xc0, 0x59, 0x7d, 0x44, 0xee, 0xe1, 0xcf, 0x46, 0xe9, 0x52, 0x69, 0xd6, 0xc8,
	0x34, 0xa7, 0x43, 0x57, 0xf0, 0x3b, 0x24, 0x4b, 0x80, 0xe7, 0xa2, 0x10, 0x4c, 0x72, 0x4c, 0x73,
	0x3a, 0x72, 0x91, 0x1e, 0x69, 0xbe, 0x7d, 0x2d, 0xb4, 0x3d, 0xe6, 0xac, 0xa6, 0x41, 0xe8, 0xc5,
	0x83, 0xac, 0xd3, 0xe4, 0x06, 0x82, 0x1d, 0xca, 0x1c, 0x35, 0xfd, 0xed, 0xda, 0xb7, 0xaa, 0xe1,
	0x19, 0x73, 0xf5, 0xc6, 0xae, 0x5e, 0xab, 0x9a, 0x99, 0xd7, 0x85, 0x52, 0x79, 0x21, 0x64, 0x63,
	0x4e, 0x9c, 0xd9, 0x47, 0x6e, 0x1a, 0xc9, 0xd1, 0x58, 0xdd, 0xec, 0x1a, 0xda, 0x69, 0x3a, 0x42,
	0x1e, 0x60, 0x7e, 0x40, 0x5e, 0x69, 0x61, 0xeb, 0x83, 0x65, 0xb6, 0x32, 0x74, 0x1a, 0x7a, 0xb1,
	0x9f, 0xfd, 0xa0, 0x2b, 0x0e, 0xf3, 0x6e, 0x9d, 0xfb, 0x0a, 0x75, 0x4d, 0xf6, 0x30, 0xdb, 0xa1,
	0xbd, 0xec, 0x78, 0x79, 0xed, 0x24, 0xe7, 0x9b, 0x2f, 0xee, 0xae, 0xfa, 0xe7, 0x1b, 0x47, 0xbf,
	0xde, 0x02, 0xf7, 0xff, 0x3c, 0x7d, 0x06, 0x00, 0x00, 0xff, 0xff, 0x61, 0x72, 0xc1, 0x72, 0x52,
	0x02, 0x00, 0x00,
}
