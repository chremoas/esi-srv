// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/chremoas/esi-srv/proto (interfaces: AllianceServiceClient,CharacterServiceClient,CorporationServiceClient,SearchServiceClient)

package esi_mocks

import (
	context "context"
	proto "github.com/chremoas/esi-srv/proto"
	gomock "github.com/golang/mock/gomock"
	client "github.com/micro/go-micro/client"
)

// Mock of AllianceServiceClient interface
type MockAllianceServiceClient struct {
	ctrl     *gomock.Controller
	recorder *_MockAllianceServiceClientRecorder
}

// Recorder for MockAllianceServiceClient (not exported)
type _MockAllianceServiceClientRecorder struct {
	mock *MockAllianceServiceClient
}

func NewMockAllianceServiceClient(ctrl *gomock.Controller) *MockAllianceServiceClient {
	mock := &MockAllianceServiceClient{ctrl: ctrl}
	mock.recorder = &_MockAllianceServiceClientRecorder{mock}
	return mock
}

func (_m *MockAllianceServiceClient) EXPECT() *_MockAllianceServiceClientRecorder {
	return _m.recorder
}

func (_m *MockAllianceServiceClient) GetAllianceById(_param0 context.Context, _param1 *proto.GetAllianceByIdRequest, _param2 ...client.CallOption) (*proto.GetAllianceByIdResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetAllianceById", _s...)
	ret0, _ := ret[0].(*proto.GetAllianceByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAllianceServiceClientRecorder) GetAllianceById(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAllianceById", _s...)
}

func (_m *MockAllianceServiceClient) GetAllianceCorporationsById(_param0 context.Context, _param1 *proto.GetAllianceCorporationsByIdRequest, _param2 ...client.CallOption) (*proto.GetAllianceCorporationsByIdResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetAllianceCorporationsById", _s...)
	ret0, _ := ret[0].(*proto.GetAllianceCorporationsByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAllianceServiceClientRecorder) GetAllianceCorporationsById(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAllianceCorporationsById", _s...)
}

func (_m *MockAllianceServiceClient) GetAllianceIconsById(_param0 context.Context, _param1 *proto.GetAllianceIconsByIdRequest, _param2 ...client.CallOption) (*proto.GetAllianceIconsByIdResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetAllianceIconsById", _s...)
	ret0, _ := ret[0].(*proto.GetAllianceIconsByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAllianceServiceClientRecorder) GetAllianceIconsById(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAllianceIconsById", _s...)
}

func (_m *MockAllianceServiceClient) GetAllianceNamesByIds(_param0 context.Context, _param1 *proto.GetAllianceNamesByIdsRequest, _param2 ...client.CallOption) (*proto.GetAllianceNamesByIdsResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetAllianceNamesByIds", _s...)
	ret0, _ := ret[0].(*proto.GetAllianceNamesByIdsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAllianceServiceClientRecorder) GetAllianceNamesByIds(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAllianceNamesByIds", _s...)
}

func (_m *MockAllianceServiceClient) GetAlliances(_param0 context.Context, _param1 *proto.GetAlliancesRequest, _param2 ...client.CallOption) (*proto.GetAlliancesResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetAlliances", _s...)
	ret0, _ := ret[0].(*proto.GetAlliancesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAllianceServiceClientRecorder) GetAlliances(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAlliances", _s...)
}

// Mock of CharacterServiceClient interface
type MockCharacterServiceClient struct {
	ctrl     *gomock.Controller
	recorder *_MockCharacterServiceClientRecorder
}

// Recorder for MockCharacterServiceClient (not exported)
type _MockCharacterServiceClientRecorder struct {
	mock *MockCharacterServiceClient
}

func NewMockCharacterServiceClient(ctrl *gomock.Controller) *MockCharacterServiceClient {
	mock := &MockCharacterServiceClient{ctrl: ctrl}
	mock.recorder = &_MockCharacterServiceClientRecorder{mock}
	return mock
}

func (_m *MockCharacterServiceClient) EXPECT() *_MockCharacterServiceClientRecorder {
	return _m.recorder
}

func (_m *MockCharacterServiceClient) GetCharacterById(_param0 context.Context, _param1 *proto.GetCharacterByIdRequest, _param2 ...client.CallOption) (*proto.GetCharacterByIdResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetCharacterById", _s...)
	ret0, _ := ret[0].(*proto.GetCharacterByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCharacterServiceClientRecorder) GetCharacterById(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCharacterById", _s...)
}

// Mock of CorporationServiceClient interface
type MockCorporationServiceClient struct {
	ctrl     *gomock.Controller
	recorder *_MockCorporationServiceClientRecorder
}

// Recorder for MockCorporationServiceClient (not exported)
type _MockCorporationServiceClientRecorder struct {
	mock *MockCorporationServiceClient
}

func NewMockCorporationServiceClient(ctrl *gomock.Controller) *MockCorporationServiceClient {
	mock := &MockCorporationServiceClient{ctrl: ctrl}
	mock.recorder = &_MockCorporationServiceClientRecorder{mock}
	return mock
}

func (_m *MockCorporationServiceClient) EXPECT() *_MockCorporationServiceClientRecorder {
	return _m.recorder
}

func (_m *MockCorporationServiceClient) GetCorporationById(_param0 context.Context, _param1 *proto.GetCorporationByIdRequest, _param2 ...client.CallOption) (*proto.GetCorporationByIdResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetCorporationById", _s...)
	ret0, _ := ret[0].(*proto.GetCorporationByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCorporationServiceClientRecorder) GetCorporationById(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCorporationById", _s...)
}

// Mock of SearchServiceClient interface
type MockSearchServiceClient struct {
	ctrl     *gomock.Controller
	recorder *_MockSearchServiceClientRecorder
}

// Recorder for MockSearchServiceClient (not exported)
type _MockSearchServiceClientRecorder struct {
	mock *MockSearchServiceClient
}

func NewMockSearchServiceClient(ctrl *gomock.Controller) *MockSearchServiceClient {
	mock := &MockSearchServiceClient{ctrl: ctrl}
	mock.recorder = &_MockSearchServiceClientRecorder{mock}
	return mock
}

func (_m *MockSearchServiceClient) EXPECT() *_MockSearchServiceClientRecorder {
	return _m.recorder
}

func (_m *MockSearchServiceClient) Search(_param0 context.Context, _param1 *proto.SearchRequest, _param2 ...client.CallOption) (*proto.SearchResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Search", _s...)
	ret0, _ := ret[0].(*proto.SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSearchServiceClientRecorder) Search(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Search", _s...)
}
