// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: alliance.proto

/*
Package chremoas_esi is a generated protocol buffer package.

It is generated from these files:
	alliance.proto
	character.proto
	common.proto
	corporation.proto
	search.proto

It has these top-level messages:
	GetAlliancesRequest
	GetAlliancesResponse
	GetAllianceByIdRequest
	GetAllianceByIdResponse
	GetAllianceCorporationsByIdRequest
	GetAllianceCorporationsByIdResponse
	GetAllianceIconsByIdRequest
	GetAllianceIconsByIdResponse
	GetAllianceNamesByIdsRequest
	GetAllianceNamesByIdsResponse
	GetCharacterByIdRequest
	GetCharacterByIdResponse
	Alliance
	Icons
	AllianceNames
	Character
	Corporation
	GetCorporationByIdRequest
	GetCorporationByIdResponse
	SearchRequest
	SearchResponse
*/
package chremoas_esi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AllianceService service

type AllianceService interface {
	GetAlliances(ctx context.Context, in *GetAlliancesRequest, opts ...client.CallOption) (*GetAlliancesResponse, error)
	GetAllianceById(ctx context.Context, in *GetAllianceByIdRequest, opts ...client.CallOption) (*GetAllianceByIdResponse, error)
	GetAllianceCorporationsById(ctx context.Context, in *GetAllianceCorporationsByIdRequest, opts ...client.CallOption) (*GetAllianceCorporationsByIdResponse, error)
	GetAllianceIconsById(ctx context.Context, in *GetAllianceIconsByIdRequest, opts ...client.CallOption) (*GetAllianceIconsByIdResponse, error)
	GetAllianceNamesByIds(ctx context.Context, in *GetAllianceNamesByIdsRequest, opts ...client.CallOption) (*GetAllianceNamesByIdsResponse, error)
}

type allianceService struct {
	c    client.Client
	name string
}

func NewAllianceService(name string, c client.Client) AllianceService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "chremoas.esi"
	}
	return &allianceService{
		c:    c,
		name: name,
	}
}

func (c *allianceService) GetAlliances(ctx context.Context, in *GetAlliancesRequest, opts ...client.CallOption) (*GetAlliancesResponse, error) {
	req := c.c.NewRequest(c.name, "AllianceService.GetAlliances", in)
	out := new(GetAlliancesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allianceService) GetAllianceById(ctx context.Context, in *GetAllianceByIdRequest, opts ...client.CallOption) (*GetAllianceByIdResponse, error) {
	req := c.c.NewRequest(c.name, "AllianceService.GetAllianceById", in)
	out := new(GetAllianceByIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allianceService) GetAllianceCorporationsById(ctx context.Context, in *GetAllianceCorporationsByIdRequest, opts ...client.CallOption) (*GetAllianceCorporationsByIdResponse, error) {
	req := c.c.NewRequest(c.name, "AllianceService.GetAllianceCorporationsById", in)
	out := new(GetAllianceCorporationsByIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allianceService) GetAllianceIconsById(ctx context.Context, in *GetAllianceIconsByIdRequest, opts ...client.CallOption) (*GetAllianceIconsByIdResponse, error) {
	req := c.c.NewRequest(c.name, "AllianceService.GetAllianceIconsById", in)
	out := new(GetAllianceIconsByIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allianceService) GetAllianceNamesByIds(ctx context.Context, in *GetAllianceNamesByIdsRequest, opts ...client.CallOption) (*GetAllianceNamesByIdsResponse, error) {
	req := c.c.NewRequest(c.name, "AllianceService.GetAllianceNamesByIds", in)
	out := new(GetAllianceNamesByIdsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AllianceService service

type AllianceServiceHandler interface {
	GetAlliances(context.Context, *GetAlliancesRequest, *GetAlliancesResponse) error
	GetAllianceById(context.Context, *GetAllianceByIdRequest, *GetAllianceByIdResponse) error
	GetAllianceCorporationsById(context.Context, *GetAllianceCorporationsByIdRequest, *GetAllianceCorporationsByIdResponse) error
	GetAllianceIconsById(context.Context, *GetAllianceIconsByIdRequest, *GetAllianceIconsByIdResponse) error
	GetAllianceNamesByIds(context.Context, *GetAllianceNamesByIdsRequest, *GetAllianceNamesByIdsResponse) error
}

func RegisterAllianceServiceHandler(s server.Server, hdlr AllianceServiceHandler, opts ...server.HandlerOption) {
	type allianceService interface {
		GetAlliances(ctx context.Context, in *GetAlliancesRequest, out *GetAlliancesResponse) error
		GetAllianceById(ctx context.Context, in *GetAllianceByIdRequest, out *GetAllianceByIdResponse) error
		GetAllianceCorporationsById(ctx context.Context, in *GetAllianceCorporationsByIdRequest, out *GetAllianceCorporationsByIdResponse) error
		GetAllianceIconsById(ctx context.Context, in *GetAllianceIconsByIdRequest, out *GetAllianceIconsByIdResponse) error
		GetAllianceNamesByIds(ctx context.Context, in *GetAllianceNamesByIdsRequest, out *GetAllianceNamesByIdsResponse) error
	}
	type AllianceService struct {
		allianceService
	}
	h := &allianceServiceHandler{hdlr}
	s.Handle(s.NewHandler(&AllianceService{h}, opts...))
}

type allianceServiceHandler struct {
	AllianceServiceHandler
}

func (h *allianceServiceHandler) GetAlliances(ctx context.Context, in *GetAlliancesRequest, out *GetAlliancesResponse) error {
	return h.AllianceServiceHandler.GetAlliances(ctx, in, out)
}

func (h *allianceServiceHandler) GetAllianceById(ctx context.Context, in *GetAllianceByIdRequest, out *GetAllianceByIdResponse) error {
	return h.AllianceServiceHandler.GetAllianceById(ctx, in, out)
}

func (h *allianceServiceHandler) GetAllianceCorporationsById(ctx context.Context, in *GetAllianceCorporationsByIdRequest, out *GetAllianceCorporationsByIdResponse) error {
	return h.AllianceServiceHandler.GetAllianceCorporationsById(ctx, in, out)
}

func (h *allianceServiceHandler) GetAllianceIconsById(ctx context.Context, in *GetAllianceIconsByIdRequest, out *GetAllianceIconsByIdResponse) error {
	return h.AllianceServiceHandler.GetAllianceIconsById(ctx, in, out)
}

func (h *allianceServiceHandler) GetAllianceNamesByIds(ctx context.Context, in *GetAllianceNamesByIdsRequest, out *GetAllianceNamesByIdsResponse) error {
	return h.AllianceServiceHandler.GetAllianceNamesByIds(ctx, in, out)
}
