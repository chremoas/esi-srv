// Automatically generated by MockGen. DO NOT EDIT!
// Source: esi-srv.pb.go

package chremoas_esi

import (
	gomock "github.com/golang/mock/gomock"
	client "github.com/micro/go-micro/client"
	context "golang.org/x/net/context"
)

// Mock of EntityQueryClient interface
type MockEntityQueryClient struct {
	ctrl     *gomock.Controller
	recorder *_MockEntityQueryClientRecorder
}

// Recorder for MockEntityQueryClient (not exported)
type _MockEntityQueryClientRecorder struct {
	mock *MockEntityQueryClient
}

func NewMockEntityQueryClient(ctrl *gomock.Controller) *MockEntityQueryClient {
	mock := &MockEntityQueryClient{ctrl: ctrl}
	mock.recorder = &_MockEntityQueryClientRecorder{mock}
	return mock
}

func (_m *MockEntityQueryClient) EXPECT() *_MockEntityQueryClientRecorder {
	return _m.recorder
}

func (_m *MockEntityQueryClient) GetAlliance(ctx context.Context, in *EntityQueryRequest, opts ...client.CallOption) (*AllianceResponse, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetAlliance", _s...)
	ret0, _ := ret[0].(*AllianceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEntityQueryClientRecorder) GetAlliance(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAlliance", _s...)
}

func (_m *MockEntityQueryClient) GetCorporation(ctx context.Context, in *EntityQueryRequest, opts ...client.CallOption) (*CorporationResponse, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetCorporation", _s...)
	ret0, _ := ret[0].(*CorporationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEntityQueryClientRecorder) GetCorporation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCorporation", _s...)
}

func (_m *MockEntityQueryClient) GetCharacter(ctx context.Context, in *EntityQueryRequest, opts ...client.CallOption) (*CharacterResponse, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetCharacter", _s...)
	ret0, _ := ret[0].(*CharacterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEntityQueryClientRecorder) GetCharacter(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCharacter", _s...)
}

func (_m *MockEntityQueryClient) GetSearch(ctx context.Context, in *EntitySearchRequest, opts ...client.CallOption) (*SearchResponse, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetSearch", _s...)
	ret0, _ := ret[0].(*SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEntityQueryClientRecorder) GetSearch(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSearch", _s...)
}

// Mock of EntityQueryHandler interface
type MockEntityQueryHandler struct {
	ctrl     *gomock.Controller
	recorder *_MockEntityQueryHandlerRecorder
}

// Recorder for MockEntityQueryHandler (not exported)
type _MockEntityQueryHandlerRecorder struct {
	mock *MockEntityQueryHandler
}

func NewMockEntityQueryHandler(ctrl *gomock.Controller) *MockEntityQueryHandler {
	mock := &MockEntityQueryHandler{ctrl: ctrl}
	mock.recorder = &_MockEntityQueryHandlerRecorder{mock}
	return mock
}

func (_m *MockEntityQueryHandler) EXPECT() *_MockEntityQueryHandlerRecorder {
	return _m.recorder
}

func (_m *MockEntityQueryHandler) GetAlliance(_param0 context.Context, _param1 *EntityQueryRequest, _param2 *AllianceResponse) error {
	ret := _m.ctrl.Call(_m, "GetAlliance", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockEntityQueryHandlerRecorder) GetAlliance(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAlliance", arg0, arg1, arg2)
}

func (_m *MockEntityQueryHandler) GetCorporation(_param0 context.Context, _param1 *EntityQueryRequest, _param2 *CorporationResponse) error {
	ret := _m.ctrl.Call(_m, "GetCorporation", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockEntityQueryHandlerRecorder) GetCorporation(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCorporation", arg0, arg1, arg2)
}

func (_m *MockEntityQueryHandler) GetCharacter(_param0 context.Context, _param1 *EntityQueryRequest, _param2 *CharacterResponse) error {
	ret := _m.ctrl.Call(_m, "GetCharacter", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockEntityQueryHandlerRecorder) GetCharacter(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCharacter", arg0, arg1, arg2)
}

func (_m *MockEntityQueryHandler) GetSearch(_param0 context.Context, _param1 *EntitySearchRequest, _param2 *SearchResponse) error {
	ret := _m.ctrl.Call(_m, "GetSearch", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockEntityQueryHandlerRecorder) GetSearch(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSearch", arg0, arg1, arg2)
}
