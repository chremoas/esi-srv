// Code generated by protoc-gen-go. DO NOT EDIT.
// source: esi-srv.proto

/*
Package chremoas_esi is a generated protocol buffer package.

It is generated from these files:
	esi-srv.proto

It has these top-level messages:
	EntityQueryRequest
	AlliancesResponse
	CharactersResponse
	CorporationsResponse
	EntitiesResponse
	Alliance
	Entity
	Character
	Corporation
*/
package chremoas_esi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EntityType int32

const (
	EntityType_ALLIANCE    EntityType = 0
	EntityType_CORPORATION EntityType = 1
	EntityType_CHARACTER   EntityType = 2
)

var EntityType_name = map[int32]string{
	0: "ALLIANCE",
	1: "CORPORATION",
	2: "CHARACTER",
}
var EntityType_value = map[string]int32{
	"ALLIANCE":    0,
	"CORPORATION": 1,
	"CHARACTER":   2,
}

func (x EntityType) String() string {
	return proto.EnumName(EntityType_name, int32(x))
}
func (EntityType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type EntityQueryRequest struct {
	EntityType EntityType `protobuf:"varint,1,opt,name=EntityType,json=entityType,enum=chremoas.esi.EntityType" json:"EntityType,omitempty"`
}

func (m *EntityQueryRequest) Reset()                    { *m = EntityQueryRequest{} }
func (m *EntityQueryRequest) String() string            { return proto.CompactTextString(m) }
func (*EntityQueryRequest) ProtoMessage()               {}
func (*EntityQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EntityQueryRequest) GetEntityType() EntityType {
	if m != nil {
		return m.EntityType
	}
	return EntityType_ALLIANCE
}

type AlliancesResponse struct {
	List []*Alliance `protobuf:"bytes,1,rep,name=List,json=list" json:"List,omitempty"`
}

func (m *AlliancesResponse) Reset()                    { *m = AlliancesResponse{} }
func (m *AlliancesResponse) String() string            { return proto.CompactTextString(m) }
func (*AlliancesResponse) ProtoMessage()               {}
func (*AlliancesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AlliancesResponse) GetList() []*Alliance {
	if m != nil {
		return m.List
	}
	return nil
}

type CharactersResponse struct {
	List []*Character `protobuf:"bytes,1,rep,name=List,json=list" json:"List,omitempty"`
}

func (m *CharactersResponse) Reset()                    { *m = CharactersResponse{} }
func (m *CharactersResponse) String() string            { return proto.CompactTextString(m) }
func (*CharactersResponse) ProtoMessage()               {}
func (*CharactersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CharactersResponse) GetList() []*Character {
	if m != nil {
		return m.List
	}
	return nil
}

type CorporationsResponse struct {
	List []*Corporation `protobuf:"bytes,1,rep,name=List,json=list" json:"List,omitempty"`
}

func (m *CorporationsResponse) Reset()                    { *m = CorporationsResponse{} }
func (m *CorporationsResponse) String() string            { return proto.CompactTextString(m) }
func (*CorporationsResponse) ProtoMessage()               {}
func (*CorporationsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CorporationsResponse) GetList() []*Corporation {
	if m != nil {
		return m.List
	}
	return nil
}

type EntitiesResponse struct {
	List []*Entity `protobuf:"bytes,1,rep,name=List,json=list" json:"List,omitempty"`
}

func (m *EntitiesResponse) Reset()                    { *m = EntitiesResponse{} }
func (m *EntitiesResponse) String() string            { return proto.CompactTextString(m) }
func (*EntitiesResponse) ProtoMessage()               {}
func (*EntitiesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *EntitiesResponse) GetList() []*Entity {
	if m != nil {
		return m.List
	}
	return nil
}

type Alliance struct {
	Id     int64  `protobuf:"varint,1,opt,name=Id,json=id" json:"Id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
	Ticker string `protobuf:"bytes,3,opt,name=Ticker,json=ticker" json:"Ticker,omitempty"`
}

func (m *Alliance) Reset()                    { *m = Alliance{} }
func (m *Alliance) String() string            { return proto.CompactTextString(m) }
func (*Alliance) ProtoMessage()               {}
func (*Alliance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Alliance) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Alliance) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Alliance) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

type Entity struct {
	Id            int64      `protobuf:"varint,1,opt,name=Id,json=id" json:"Id,omitempty"`
	Name          string     `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
	Type          EntityType `protobuf:"varint,3,opt,name=Type,json=type,enum=chremoas.esi.EntityType" json:"Type,omitempty"`
	Ticker        string     `protobuf:"bytes,4,opt,name=Ticker,json=ticker" json:"Ticker,omitempty"`
	CorporationId int64      `protobuf:"varint,5,opt,name=CorporationId,json=corporationId" json:"CorporationId,omitempty"`
	AllianceId    int64      `protobuf:"varint,6,opt,name=AllianceId,json=allianceId" json:"AllianceId,omitempty"`
}

func (m *Entity) Reset()                    { *m = Entity{} }
func (m *Entity) String() string            { return proto.CompactTextString(m) }
func (*Entity) ProtoMessage()               {}
func (*Entity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Entity) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Entity) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Entity) GetType() EntityType {
	if m != nil {
		return m.Type
	}
	return EntityType_ALLIANCE
}

func (m *Entity) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

func (m *Entity) GetCorporationId() int64 {
	if m != nil {
		return m.CorporationId
	}
	return 0
}

func (m *Entity) GetAllianceId() int64 {
	if m != nil {
		return m.AllianceId
	}
	return 0
}

type Character struct {
	Id            int64  `protobuf:"varint,1,opt,name=Id,json=id" json:"Id,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
	CorporationId int64  `protobuf:"varint,3,opt,name=CorporationId,json=corporationId" json:"CorporationId,omitempty"`
}

func (m *Character) Reset()                    { *m = Character{} }
func (m *Character) String() string            { return proto.CompactTextString(m) }
func (*Character) ProtoMessage()               {}
func (*Character) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Character) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Character) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Character) GetCorporationId() int64 {
	if m != nil {
		return m.CorporationId
	}
	return 0
}

type Corporation struct {
	Id         int64  `protobuf:"varint,1,opt,name=Id,json=id" json:"Id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
	Ticker     string `protobuf:"bytes,3,opt,name=Ticker,json=ticker" json:"Ticker,omitempty"`
	AllianceId int64  `protobuf:"varint,4,opt,name=AllianceId,json=allianceId" json:"AllianceId,omitempty"`
}

func (m *Corporation) Reset()                    { *m = Corporation{} }
func (m *Corporation) String() string            { return proto.CompactTextString(m) }
func (*Corporation) ProtoMessage()               {}
func (*Corporation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Corporation) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Corporation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Corporation) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

func (m *Corporation) GetAllianceId() int64 {
	if m != nil {
		return m.AllianceId
	}
	return 0
}

func init() {
	proto.RegisterType((*EntityQueryRequest)(nil), "chremoas.esi.EntityQueryRequest")
	proto.RegisterType((*AlliancesResponse)(nil), "chremoas.esi.AlliancesResponse")
	proto.RegisterType((*CharactersResponse)(nil), "chremoas.esi.CharactersResponse")
	proto.RegisterType((*CorporationsResponse)(nil), "chremoas.esi.CorporationsResponse")
	proto.RegisterType((*EntitiesResponse)(nil), "chremoas.esi.EntitiesResponse")
	proto.RegisterType((*Alliance)(nil), "chremoas.esi.Alliance")
	proto.RegisterType((*Entity)(nil), "chremoas.esi.Entity")
	proto.RegisterType((*Character)(nil), "chremoas.esi.Character")
	proto.RegisterType((*Corporation)(nil), "chremoas.esi.Corporation")
	proto.RegisterEnum("chremoas.esi.EntityType", EntityType_name, EntityType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for EntityQuery service

type EntityQueryClient interface {
	GetAlliances(ctx context.Context, in *EntityQueryRequest, opts ...client.CallOption) (*AlliancesResponse, error)
	GetCorporations(ctx context.Context, in *EntityQueryRequest, opts ...client.CallOption) (*CorporationsResponse, error)
	GetCharacters(ctx context.Context, in *EntityQueryRequest, opts ...client.CallOption) (*CharactersResponse, error)
	GetEntities(ctx context.Context, in *EntityQueryRequest, opts ...client.CallOption) (*EntitiesResponse, error)
}

type entityQueryClient struct {
	c           client.Client
	serviceName string
}

func NewEntityQueryClient(serviceName string, c client.Client) EntityQueryClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "chremoas.esi"
	}
	return &entityQueryClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *entityQueryClient) GetAlliances(ctx context.Context, in *EntityQueryRequest, opts ...client.CallOption) (*AlliancesResponse, error) {
	req := c.c.NewRequest(c.serviceName, "EntityQuery.GetAlliances", in)
	out := new(AlliancesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityQueryClient) GetCorporations(ctx context.Context, in *EntityQueryRequest, opts ...client.CallOption) (*CorporationsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "EntityQuery.GetCorporations", in)
	out := new(CorporationsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityQueryClient) GetCharacters(ctx context.Context, in *EntityQueryRequest, opts ...client.CallOption) (*CharactersResponse, error) {
	req := c.c.NewRequest(c.serviceName, "EntityQuery.GetCharacters", in)
	out := new(CharactersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityQueryClient) GetEntities(ctx context.Context, in *EntityQueryRequest, opts ...client.CallOption) (*EntitiesResponse, error) {
	req := c.c.NewRequest(c.serviceName, "EntityQuery.GetEntities", in)
	out := new(EntitiesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EntityQuery service

type EntityQueryHandler interface {
	GetAlliances(context.Context, *EntityQueryRequest, *AlliancesResponse) error
	GetCorporations(context.Context, *EntityQueryRequest, *CorporationsResponse) error
	GetCharacters(context.Context, *EntityQueryRequest, *CharactersResponse) error
	GetEntities(context.Context, *EntityQueryRequest, *EntitiesResponse) error
}

func RegisterEntityQueryHandler(s server.Server, hdlr EntityQueryHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&EntityQuery{hdlr}, opts...))
}

type EntityQuery struct {
	EntityQueryHandler
}

func (h *EntityQuery) GetAlliances(ctx context.Context, in *EntityQueryRequest, out *AlliancesResponse) error {
	return h.EntityQueryHandler.GetAlliances(ctx, in, out)
}

func (h *EntityQuery) GetCorporations(ctx context.Context, in *EntityQueryRequest, out *CorporationsResponse) error {
	return h.EntityQueryHandler.GetCorporations(ctx, in, out)
}

func (h *EntityQuery) GetCharacters(ctx context.Context, in *EntityQueryRequest, out *CharactersResponse) error {
	return h.EntityQueryHandler.GetCharacters(ctx, in, out)
}

func (h *EntityQuery) GetEntities(ctx context.Context, in *EntityQueryRequest, out *EntitiesResponse) error {
	return h.EntityQueryHandler.GetEntities(ctx, in, out)
}

func init() { proto.RegisterFile("esi-srv.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 477 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xeb, 0xd8, 0x58, 0xcd, 0x38, 0x6e, 0xc3, 0xa8, 0x2a, 0x86, 0x43, 0xb1, 0x2c, 0x0e,
	0x51, 0xa1, 0x39, 0x84, 0x0b, 0x42, 0x48, 0xc8, 0xb2, 0x42, 0xb0, 0x14, 0x25, 0x74, 0x49, 0x0f,
	0x1c, 0x8d, 0x33, 0x52, 0x57, 0x24, 0xb6, 0xd9, 0xdd, 0x22, 0xe5, 0xcd, 0x78, 0x23, 0x5e, 0x03,
	0xe1, 0x26, 0xce, 0x3a, 0xb8, 0xc2, 0x12, 0xb7, 0x64, 0x3c, 0xf3, 0x8d, 0xff, 0x99, 0xf9, 0x0d,
	0x2e, 0x49, 0x7e, 0x25, 0xc5, 0x8f, 0x61, 0x21, 0x72, 0x95, 0x63, 0x2f, 0xbd, 0x15, 0xb4, 0xce,
	0x13, 0x39, 0x24, 0xc9, 0x83, 0x19, 0xe0, 0x38, 0x53, 0x5c, 0x6d, 0xae, 0xef, 0x48, 0x6c, 0x18,
	0x7d, 0xbf, 0x23, 0xa9, 0xf0, 0x0d, 0xc0, 0x7d, 0x74, 0xb1, 0x29, 0xc8, 0x33, 0x7c, 0x63, 0x70,
	0x32, 0xf2, 0x86, 0x7a, 0xe1, 0x70, 0xff, 0x9c, 0x01, 0x55, 0xbf, 0x83, 0xf7, 0xf0, 0x38, 0x5c,
	0xad, 0x78, 0x92, 0xa5, 0x24, 0x19, 0xc9, 0x22, 0xcf, 0x24, 0xe1, 0x25, 0x58, 0x53, 0x2e, 0x95,
	0x67, 0xf8, 0xe6, 0xc0, 0x19, 0x9d, 0xd7, 0x41, 0xbb, 0x74, 0x66, 0xad, 0xb8, 0x54, 0x41, 0x08,
	0x18, 0xdd, 0x26, 0x22, 0x49, 0x15, 0x89, 0x3d, 0xe1, 0x65, 0x8d, 0xf0, 0xa4, 0x4e, 0xa8, 0xf2,
	0xb7, 0x88, 0x31, 0x9c, 0x45, 0xb9, 0x28, 0x72, 0x91, 0x28, 0x9e, 0x67, 0x7b, 0xc8, 0x55, 0x0d,
	0xf2, 0xf4, 0x00, 0xb2, 0xaf, 0xd8, 0x62, 0xde, 0x41, 0xbf, 0x14, 0xc9, 0x35, 0x25, 0x83, 0x1a,
	0xe2, 0xac, 0x69, 0x24, 0xdb, 0xea, 0x0f, 0x70, 0xbc, 0x53, 0x86, 0x27, 0xd0, 0x89, 0x97, 0xe5,
	0x18, 0x4d, 0xd6, 0xe1, 0x4b, 0x44, 0xb0, 0x66, 0xc9, 0x9a, 0xbc, 0x8e, 0x6f, 0x0c, 0xba, 0xcc,
	0xca, 0x92, 0x35, 0xe1, 0x39, 0xd8, 0x0b, 0x9e, 0x7e, 0x23, 0xe1, 0x99, 0x65, 0xd4, 0x56, 0xe5,
	0xbf, 0xe0, 0xa7, 0x01, 0xf6, 0x3d, 0xb8, 0x15, 0xe6, 0x15, 0x58, 0xe5, 0xce, 0xcc, 0x7f, 0xec,
	0xcc, 0x52, 0x9b, 0x42, 0x6f, 0x6a, 0xe9, 0x4d, 0xf1, 0x05, 0xb8, 0xda, 0x3c, 0xe2, 0xa5, 0xf7,
	0xa8, 0x6c, 0xea, 0xa6, 0x7a, 0x10, 0x2f, 0x00, 0x76, 0x12, 0xe3, 0xa5, 0x67, 0x97, 0x29, 0x90,
	0x54, 0x91, 0xe0, 0x06, 0xba, 0xd5, 0x6a, 0x5a, 0xbd, 0xfc, 0x5f, 0x6d, 0xcd, 0x86, 0xb6, 0x01,
	0x07, 0x47, 0xcb, 0xfa, 0x9f, 0xe1, 0x1e, 0x28, 0xb0, 0x0e, 0x15, 0x5c, 0xbe, 0xd5, 0x7d, 0x80,
	0x3d, 0x38, 0x0e, 0xa7, 0xd3, 0x38, 0x9c, 0x45, 0xe3, 0xfe, 0x11, 0x9e, 0x82, 0x13, 0xcd, 0xd9,
	0xa7, 0x39, 0x0b, 0x17, 0xf1, 0x7c, 0xd6, 0x37, 0xd0, 0x85, 0x6e, 0xf4, 0x31, 0x64, 0x61, 0xb4,
	0x18, 0xb3, 0x7e, 0x67, 0xf4, 0xab, 0x03, 0x8e, 0x66, 0x2d, 0xfc, 0x0c, 0xbd, 0x09, 0xa9, 0xca,
	0x1c, 0xe8, 0x37, 0xed, 0x46, 0x77, 0xe1, 0xb3, 0xe7, 0xcd, 0x46, 0xa9, 0xae, 0x31, 0x38, 0xc2,
	0x2f, 0x70, 0x3a, 0x21, 0xa5, 0x5f, 0x7b, 0x0b, 0x6e, 0xf0, 0xe0, 0xe5, 0xeb, 0xe8, 0x1b, 0x70,
	0xff, 0xa0, 0x2b, 0x2f, 0xb6, 0x00, 0xfb, 0x0f, 0xf8, 0x52, 0xc7, 0x5e, 0x83, 0x33, 0x21, 0xb5,
	0x33, 0x56, 0x0b, 0xe8, 0x45, 0x43, 0x06, 0xd7, 0x87, 0xf0, 0xd5, 0x2e, 0x3f, 0x6c, 0xaf, 0x7f,
	0x07, 0x00, 0x00, 0xff, 0xff, 0x54, 0x45, 0x4d, 0x8a, 0xe9, 0x04, 0x00, 0x00,
}
