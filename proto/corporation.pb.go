// Code generated by protoc-gen-go. DO NOT EDIT.
// source: corporation.proto

/*
Package chremoas_esi is a generated protocol buffer package.

It is generated from these files:
	corporation.proto

It has these top-level messages:
	CorporationResponse
	Corporation
*/
package chremoas_esi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import chremoas_esi1 "."

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CorporationResponse struct {
	Result *Corporation `protobuf:"bytes,1,opt,name=Result" json:"Result,omitempty"`
}

func (m *CorporationResponse) Reset()                    { *m = CorporationResponse{} }
func (m *CorporationResponse) String() string            { return proto.CompactTextString(m) }
func (*CorporationResponse) ProtoMessage()               {}
func (*CorporationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CorporationResponse) GetResult() *Corporation {
	if m != nil {
		return m.Result
	}
	return nil
}

type Corporation struct {
	Id           int32   `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	Name         string  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Ticker       string  `protobuf:"bytes,3,opt,name=Ticker" json:"Ticker,omitempty"`
	MemberCount  int32   `protobuf:"varint,4,opt,name=MemberCount" json:"MemberCount,omitempty"`
	CeoId        int32   `protobuf:"varint,5,opt,name=CeoId" json:"CeoId,omitempty"`
	AllianceId   int32   `protobuf:"varint,6,opt,name=AllianceId" json:"AllianceId,omitempty"`
	Description  string  `protobuf:"bytes,7,opt,name=Description" json:"Description,omitempty"`
	TaxRate      float32 `protobuf:"fixed32,8,opt,name=TaxRate" json:"TaxRate,omitempty"`
	CreationDate int64   `protobuf:"varint,9,opt,name=CreationDate" json:"CreationDate,omitempty"`
	CreatorId    int32   `protobuf:"varint,10,opt,name=CreatorId" json:"CreatorId,omitempty"`
	Url          string  `protobuf:"bytes,11,opt,name=Url" json:"Url,omitempty"`
	Faction      string  `protobuf:"bytes,12,opt,name=Faction" json:"Faction,omitempty"`
}

func (m *Corporation) Reset()                    { *m = Corporation{} }
func (m *Corporation) String() string            { return proto.CompactTextString(m) }
func (*Corporation) ProtoMessage()               {}
func (*Corporation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Corporation) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Corporation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Corporation) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

func (m *Corporation) GetMemberCount() int32 {
	if m != nil {
		return m.MemberCount
	}
	return 0
}

func (m *Corporation) GetCeoId() int32 {
	if m != nil {
		return m.CeoId
	}
	return 0
}

func (m *Corporation) GetAllianceId() int32 {
	if m != nil {
		return m.AllianceId
	}
	return 0
}

func (m *Corporation) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Corporation) GetTaxRate() float32 {
	if m != nil {
		return m.TaxRate
	}
	return 0
}

func (m *Corporation) GetCreationDate() int64 {
	if m != nil {
		return m.CreationDate
	}
	return 0
}

func (m *Corporation) GetCreatorId() int32 {
	if m != nil {
		return m.CreatorId
	}
	return 0
}

func (m *Corporation) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Corporation) GetFaction() string {
	if m != nil {
		return m.Faction
	}
	return ""
}

func init() {
	proto.RegisterType((*CorporationResponse)(nil), "chremoas.esi.CorporationResponse")
	proto.RegisterType((*Corporation)(nil), "chremoas.esi.Corporation")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for CorporationQuery service

type CorporationQueryClient interface {
	GetCorporation(ctx context.Context, in *chremoas_esi1.EntityQueryRequest, opts ...client.CallOption) (*CorporationResponse, error)
}

type corporationQueryClient struct {
	c           client.Client
	serviceName string
}

func NewCorporationQueryClient(serviceName string, c client.Client) CorporationQueryClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "chremoas.esi"
	}
	return &corporationQueryClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *corporationQueryClient) GetCorporation(ctx context.Context, in *chremoas_esi1.EntityQueryRequest, opts ...client.CallOption) (*CorporationResponse, error) {
	req := c.c.NewRequest(c.serviceName, "CorporationQuery.GetCorporation", in)
	out := new(CorporationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CorporationQuery service

type CorporationQueryHandler interface {
	GetCorporation(context.Context, *chremoas_esi1.EntityQueryRequest, *CorporationResponse) error
}

func RegisterCorporationQueryHandler(s server.Server, hdlr CorporationQueryHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&CorporationQuery{hdlr}, opts...))
}

type CorporationQuery struct {
	CorporationQueryHandler
}

func (h *CorporationQuery) GetCorporation(ctx context.Context, in *chremoas_esi1.EntityQueryRequest, out *CorporationResponse) error {
	return h.CorporationQueryHandler.GetCorporation(ctx, in, out)
}

func init() { proto.RegisterFile("corporation.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x4f, 0x4f, 0xb3, 0x40,
	0x10, 0xc6, 0x5f, 0x68, 0x4b, 0xdf, 0x0e, 0xa4, 0xa9, 0xab, 0x31, 0x6b, 0x63, 0x0c, 0x72, 0xe2,
	0x44, 0x62, 0xfd, 0x04, 0x86, 0xfa, 0x87, 0x83, 0x26, 0x6e, 0x6a, 0x3c, 0x53, 0x98, 0x44, 0x52,
	0x60, 0x71, 0x59, 0x12, 0xfb, 0x19, 0xfd, 0x52, 0x86, 0xb1, 0x4d, 0xb7, 0x07, 0x6f, 0xfb, 0xfc,
	0x9e, 0x9d, 0x79, 0x96, 0x19, 0xe0, 0x24, 0x93, 0xaa, 0x91, 0x2a, 0xd5, 0x85, 0xac, 0xa3, 0x46,
	0x49, 0x2d, 0x99, 0x97, 0x7d, 0x28, 0xac, 0x64, 0xda, 0x46, 0xd8, 0x16, 0x73, 0x2f, 0x93, 0x55,
	0xb5, 0xf7, 0x82, 0x27, 0x38, 0x8d, 0x0f, 0x05, 0x02, 0xdb, 0x46, 0xd6, 0x2d, 0xb2, 0x1b, 0x70,
	0x04, 0xb6, 0x5d, 0xa9, 0xb9, 0xe5, 0x5b, 0xa1, 0xbb, 0xb8, 0x88, 0xcc, 0x1e, 0x91, 0x59, 0xb2,
	0xbb, 0x18, 0x7c, 0xdb, 0xe0, 0x1a, 0x9c, 0x4d, 0xc1, 0x4e, 0x72, 0x2a, 0x1f, 0x09, 0x3b, 0xc9,
	0x19, 0x83, 0xe1, 0x4b, 0x5a, 0x21, 0xb7, 0x7d, 0x2b, 0x9c, 0x08, 0x3a, 0xb3, 0x73, 0x70, 0x56,
	0x45, 0xb6, 0x41, 0xc5, 0x07, 0x44, 0x77, 0x8a, 0xf9, 0xe0, 0x3e, 0x63, 0xb5, 0x46, 0x15, 0xcb,
	0xae, 0xd6, 0x7c, 0x48, 0x4d, 0x4c, 0xc4, 0xce, 0x60, 0x14, 0xa3, 0x4c, 0x72, 0x3e, 0x22, 0xef,
	0x57, 0xb0, 0x2b, 0x80, 0xbb, 0xb2, 0x2c, 0xd2, 0x3a, 0xc3, 0x24, 0xe7, 0x0e, 0x59, 0x06, 0xe9,
	0xfb, 0x2e, 0xb1, 0xcd, 0x54, 0xd1, 0xf4, 0x4f, 0xe4, 0x63, 0x0a, 0x35, 0x11, 0xe3, 0x30, 0x5e,
	0xa5, 0x5f, 0x22, 0xd5, 0xc8, 0xff, 0xfb, 0x56, 0x68, 0x8b, 0xbd, 0x64, 0x01, 0x78, 0xb1, 0x42,
	0xfa, 0xb6, 0x65, 0x6f, 0x4f, 0x7c, 0x2b, 0x1c, 0x88, 0x23, 0xc6, 0x2e, 0x61, 0x42, 0x5a, 0xaa,
	0x24, 0xe7, 0x40, 0xf1, 0x07, 0xc0, 0x66, 0x30, 0x78, 0x53, 0x25, 0x77, 0x29, 0xb5, 0x3f, 0xf6,
	0x69, 0x0f, 0x69, 0x46, 0x6f, 0xf1, 0x88, 0xee, 0xe5, 0x62, 0x03, 0x33, 0x63, 0x98, 0xaf, 0x1d,
	0xaa, 0x2d, 0x7b, 0x87, 0xe9, 0x23, 0x6a, 0x73, 0xc6, 0xfe, 0xf1, 0x5a, 0xee, 0x6b, 0x5d, 0xe8,
	0x2d, 0x5d, 0x16, 0xf8, 0xd9, 0x61, 0xab, 0xe7, 0xd7, 0x7f, 0x2f, 0x6e, 0xb7, 0xeb, 0xe0, 0xdf,
	0xda, 0xa1, 0x7f, 0xe1, 0xf6, 0x27, 0x00, 0x00, 0xff, 0xff, 0xdf, 0x57, 0xcf, 0xac, 0x3c, 0x02,
	0x00, 0x00,
}
